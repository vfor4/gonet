// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: housework.proto

package housework

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RobotMaid_Add_FullMethodName      = "/main.RobotMaid/Add"
	RobotMaid_Complete_FullMethodName = "/main.RobotMaid/Complete"
	RobotMaid_List_FullMethodName     = "/main.RobotMaid/List"
)

// RobotMaidClient is the client API for RobotMaid service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RobotMaidClient interface {
	Add(ctx context.Context, in *Chores, opts ...grpc.CallOption) (*Response, error)
	Complete(ctx context.Context, in *CompleteRequest, opts ...grpc.CallOption) (*Response, error)
	List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Chores, error)
}

type robotMaidClient struct {
	cc grpc.ClientConnInterface
}

func NewRobotMaidClient(cc grpc.ClientConnInterface) RobotMaidClient {
	return &robotMaidClient{cc}
}

func (c *robotMaidClient) Add(ctx context.Context, in *Chores, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, RobotMaid_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotMaidClient) Complete(ctx context.Context, in *CompleteRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, RobotMaid_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotMaidClient) List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Chores, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Chores)
	err := c.cc.Invoke(ctx, RobotMaid_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RobotMaidServer is the server API for RobotMaid service.
// All implementations must embed UnimplementedRobotMaidServer
// for forward compatibility.
type RobotMaidServer interface {
	Add(context.Context, *Chores) (*Response, error)
	Complete(context.Context, *CompleteRequest) (*Response, error)
	List(context.Context, *Empty) (*Chores, error)
	mustEmbedUnimplementedRobotMaidServer()
}

// UnimplementedRobotMaidServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRobotMaidServer struct{}

func (UnimplementedRobotMaidServer) Add(context.Context, *Chores) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedRobotMaidServer) Complete(context.Context, *CompleteRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Complete not implemented")
}
func (UnimplementedRobotMaidServer) List(context.Context, *Empty) (*Chores, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedRobotMaidServer) mustEmbedUnimplementedRobotMaidServer() {}
func (UnimplementedRobotMaidServer) testEmbeddedByValue()                   {}

// UnsafeRobotMaidServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RobotMaidServer will
// result in compilation errors.
type UnsafeRobotMaidServer interface {
	mustEmbedUnimplementedRobotMaidServer()
}

func RegisterRobotMaidServer(s grpc.ServiceRegistrar, srv RobotMaidServer) {
	// If the following call pancis, it indicates UnimplementedRobotMaidServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RobotMaid_ServiceDesc, srv)
}

func _RobotMaid_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chores)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotMaidServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RobotMaid_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotMaidServer).Add(ctx, req.(*Chores))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotMaid_Complete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotMaidServer).Complete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RobotMaid_Complete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotMaidServer).Complete(ctx, req.(*CompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RobotMaid_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotMaidServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RobotMaid_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotMaidServer).List(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// RobotMaid_ServiceDesc is the grpc.ServiceDesc for RobotMaid service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RobotMaid_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.RobotMaid",
	HandlerType: (*RobotMaidServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _RobotMaid_Add_Handler,
		},
		{
			MethodName: "Complete",
			Handler:    _RobotMaid_Complete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _RobotMaid_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "housework.proto",
}
